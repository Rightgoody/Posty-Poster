1. First, install MySQL if you haven't already:

For Ubuntu/Debian:
bash

sudo apt update
sudo apt install mysql-server
sudo mysql_secure_installation

For CentOS/RHEL:
bash

sudo yum install mysql-server
sudo systemctl start mysqld
sudo mysql_secure_installation

For macOS (using Homebrew):
bash

brew install mysql
brew services start mysql
mysql_secure_installation

2. Create the Database and User:
bash

sudo mysql -u root -p

Then in MySQL shell:
sql

-- Create database
CREATE DATABASE ReadIt_data CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Create user (use the same credentials as in your api.php)
CREATE USER 'meow'@'localhost' IDENTIFIED BY 'plumeria';

-- Grant privileges
GRANT ALL PRIVILEGES ON ReadIt_data.* TO 'meow'@'localhost';

-- Apply changes
FLUSH PRIVILEGES;

-- Exit MySQL
EXIT;

3. Import the Database Schema:

Save the updated ReadIt.sql file I provided earlier, then run:
bash

mysql -u meow -p ReadIt_data < ReadIt.sql

4. Verify the Database Setup:
bash

mysql -u meow -p ReadIt_data

Then in MySQL shell:
sql

SHOW TABLES;
DESCRIBE users;
SELECT COUNT(*) FROM users;
EXIT;

5. Configure PHP to Work with MySQL:

Ensure your PHP installation has MySQL support:
bash

# For PHP on Ubuntu/Debian
sudo apt install php-mysql

# For PHP on CentOS/RHEL
sudo yum install php-mysqlnd

# Restart your web server
sudo systemctl restart apache2   # or nginx, or httpd

6. Testing Your Setup (In-Depth)
6.1 File Placement
bash

# For Apache:
sudo cp -r your_project_folder/* /var/www/html/
sudo chown -R www-data:www-data /var/www/html/
sudo chmod -R 755 /var/www/html/

# For Nginx:
sudo cp -r your_project_folder/* /usr/share/nginx/html/
sudo chown -R nginx:nginx /usr/share/nginx/html/

Method 1: Check Running Services

Run this command in your terminal:
bash

sudo systemctl list-units --type=service | grep -E 'apache|nginx|httpd'

You'll see one of these results:

    Apache will show either apache2 or httpd service running

    Nginx will show nginx service running

    If neither appears, you may need to install one

Method 2: Check Listening Ports
bash

sudo netstat -tulpn | grep ':80'

    If you see apache2 or httpd → You're running Apache

    If you see nginx → You're running Nginx

Method 3: Check Installed Packages
bash

# For Debian/Ubuntu:
sudo apt list --installed | grep -E 'apache|nginx'

# For RHEL/CentOS:
sudo yum list installed | grep -E 'httpd|nginx'

What If Neither Is Installed?

Install Apache (simpler for beginners):
bash

# Debian/Ubuntu:
sudo apt update && sudo apt install apache2

# RHEL/CentOS:
sudo yum install httpd
sudo systemctl start httpd

Verify File Location
bash

ls -la /var/www/html/

    You should see your project files (index.html, register.html, etc.)

    If missing, copy them:
    bash

    sudo cp -r ~/your_project_folder/* /var/www/html/

Check Apache's Document Root
bash

grep -i "DocumentRoot" /etc/apache2/sites-enabled/*

    Should show /var/www/html

    If not, edit config:
    bash

sudo nano /etc/apache2/sites-enabled/000-default.conf
Ensure this exists:
apache

    DocumentRoot /var/www/html

Enable File Permissions
bash

sudo chown -R $USER:$USER /var/www/html
sudo chmod -R 755 /var/www/html

Test with Simple File
bash

echo "Hello World" | sudo tee /var/www/html/test.txt

    Access http://localhost/test.txt in browser

    If this works, your issue is file placement

Check for .htaccess Conflicts
bash

sudo nano /var/www/html/.htaccess

    Temporarily rename it if exists:
    bash

sudo mv /var/www/html/.htaccess /var/www/html/.htaccess.bak
Enable Directory Indexing
bash

sudo nano /etc/apache2/mods-enabled/dir.conf

Ensure this order includes index.html:
apache

DirectoryIndex index.html index.php index.cgi index.pl index.xhtml index.htm

Restart Apache
bash

sudo systemctl restart apache2

6.2 Browser Testing

    Access these URLs in your browser:

        http://localhost/register.html

        http://localhost/index.html

    Check for errors:

        Browser Console (F12 > Console tab): Look for red error messages

        Network tab: Check API responses (click on the api.php request)

6.3 Common Registration Errors
Error Symptom	Likely Cause	Solution
"Database connection failed"	Wrong credentials in api.php	Verify username/password
Blank white page	PHP errors disabled	Enable display_errors in php.ini
500 Internal Server Error	File permissions	Run sudo chmod 644 /var/www/html/api.php
6.4 Log Checking
bash

# PHP/Apache logs:
sudo tail -f /var/log/apache2/error.log

# Nginx logs:
sudo tail -f /var/log/nginx/error.log

# MySQL logs:
sudo tail -f /var/log/mysql/error.log